'''1. Сформувати функцію, що буде обчислювати факторіал заданого користувачем
натурального числа n.
Виконав: Лещенко В. О.

В даному випадку доцільно використовувати як рекурсію, так і ітерацію.
Час розробки програм ідентичний, затрачений час на виконання також практично однаковий.
Читабельність з використанням ітерацій мені більш зрозуміла.'''

import timeit # імпортуємо timeit для розрахунку часу виконнаня програми

def factorial_rec(n): # шукаємо за допомогою рекурсії
    if n == 1: # факторіал від одиниці - є сама одиниця
        return n
    else:
        return n * factorial_rec(n - 1) # інакше - множимо число на факторіал числа, що стоїть перед ним

def factorial_iter(n): # шукаємо за допомогою ітерарації
    product = 1 # змінна для визначення поточного факторіала
    for i in range(1, n + 1): # створюємо цикл, де йдемо від одиниці до числа n
        product *= i # на кожному кроці множимо попередній факторіал на число
    return product # повертаємо


n = int(input('Введіть число n: ')) # користувач вводить число
if n < 0: # якщо менше 0 - не існує факторіал від нього
    print("Не існує факторіала від від'ємного числа.")
elif n == 0: # факторіал від 0 - одиниця
    print('Факторіал від нуля дорівнює одиниці.')
else: # інакше - користувач обирає спосіб для знаходження: ітерація чи рекурсія
    question = int(input('Який метод для знаходження факторіала використовувати: рекурсія (1) чи ітерація (2): '))
    if question == 1:
        print(f'Факторіал від {n} дорівнює {factorial_rec(n)}.')
    elif question == 2:
        print(f'Факторіал від {n} дорівнює {factorial_iter(n)}.')
    print('Затрачений час: ', timeit.timeit('"-".join(str(n) for n in range(100))', number=10000)) # виводимо затрачений час