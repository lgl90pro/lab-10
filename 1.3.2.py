'''2. Сформувати функцію для обчислення цифрового кореню натурального числа.
Цифровий корінь отримується наступним чином: необхідно скласти всі цифри заданого
числа, потім скласти всі цифри знайденої суми і повторювати процес до тих пір, поки
сума не буде дорівнювати однозначному числу, що і буде цифровим коренем заданого
числа.
Виконав: Лещенко В. О.

В даному випадку більш доцільніше використовувати рекурсію.
Час розробки рекурсивного методу був швидшим, затрачений час однаковий, або ітерація трішки швидше.
Читабельність з використанням рекурсії мені більш зрозуміла.'''

import timeit

def sum(n): # знаходимо суму цифр числа
    if n < 10: # якщо число менше 10 - то воно саме і є сумою цифр
        return n
    else: # інакше - знаходимо остачу від ділення на 10 і додаємо суму, поділивши націло на 10
        return n % 10 + sum(n // 10)

def root_rec(n): # знаходимо цифровий корінь за допомогою рекурсії
    if n < 10:
        return n
    else:
        return root_rec(sum(n))

def root_iter(n): # знаходимо цифровий корінь за допомогою ітерації
    while n > 9: # поки число більше 10, ділимо його і додаємо остачу
        i = int(n % 10)
        n = n // 10
        n = n + i
    return n

n = int(input('Введіть число n: '))
if n < 0:
    print("Неможливо знайти квадратний корінь від від'ємного числа.")
else:
    question = int(input('Який спосіб використовувати: рекурсія (1) чи ітерація (2): '))
    if question == 1:
        print(f'Цифровий корінь з {n} дорівнює {root_rec(n)}.')
    elif question == 2:
        print(f'Цифровий корінь з {n} дорівнює {root_iter(n)}.')
    print('Затрачений час: ', timeit.timeit('"-".join(str(n) for n in range(100))', number=10000))